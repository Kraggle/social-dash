@mixin button-gradient($main, $state) {
    &:not(.btn-link) {
        @include diagonal-gradient($main, $state);

        padding: calc(#{$btn-padding-y} + 1px) calc(#{$btn-padding-x} + 1px);
        transition: all 0.15s ease;
        border-width: 0;

        .btn-check:checked + &,
        .btn-check:active + &,
        &:active,
        &.active,
        .show > &.dropdown-toggle,
        .btn-check:focus + &,
        &:focus,
        &:hover {
            background-position: bottom left;
            transition: all 0.3s ease-in-out;

            &:focus {
                background-position: bottom left;
                transition: all 0.3s ease-in-out;
            }
        }

        &:disabled,
        &.disabled {
            @include diagonal-gradient(darken($main, 5%), darken($state, 5%));
        }

        &.btn-sm {
            padding: calc(#{$btn-padding-y-sm} + 1px)
                calc(#{$btn-padding-x-sm} + 1px);
        }

        &.btn-lg {
            padding: calc(#{$btn-padding-y-lg} + 1px)
                calc(#{$btn-padding-x-lg} + 1px);
        }
    }
}

@mixin button-variant(
    $background,
    $border,
    $color: color-contrast($background),
    $hover-background:
        if(
            $color == $color-contrast-light,
            shade-color($background, $btn-hover-bg-shade-amount),
            tint-color($background, $btn-hover-bg-tint-amount)
        ),
    $hover-border:
        if(
            $color == $color-contrast-light,
            shade-color($border, $btn-hover-border-shade-amount),
            tint-color($border, $btn-hover-border-tint-amount)
        ),
    $hover-color: color-contrast($hover-background),
    $active-background:
        if(
            $color == $color-contrast-light,
            shade-color($background, $btn-active-bg-shade-amount),
            tint-color($background, $btn-active-bg-tint-amount)
        ),
    $active-border:
        if(
            $color == $color-contrast-light,
            shade-color($border, $btn-active-border-shade-amount),
            tint-color($border, $btn-active-border-tint-amount)
        ),
    $active-color: color-contrast($active-background),
    $disabled-background: $background,
    $disabled-border: $border,
    $disabled-color: color-contrast($disabled-background)
) {
    &:not(.btn-link) {
        color: $color;
        @include gradient-bg($background);
        border-color: $border;
        @include box-shadow($btn-box-shadow);
        // transform: scale(1);

        &:hover {
            color: $hover-color;
            @include gradient-bg($hover-background);
            border-color: $hover-border;
            // transform: scale(1.05);
        }

        .btn-check:focus + &,
        &:focus {
            color: $hover-color;
            @include gradient-bg($hover-background);
            border-color: $hover-border;
            @if $enable-shadows {
                @include box-shadow(
                    $btn-box-shadow,
                    0 0 0 $btn-focus-width rgba(mix($color, $border, 15%), 0.5)
                );
            } @else {
                // Avoid using mixin so we can pass custom focus shadow properly
                box-shadow: 0
                    0
                    0
                    $btn-focus-width
                    rgba(mix($color, $border, 15%), 0.5);
            }
        }

        .btn-check:checked + &,
        .btn-check:active + &,
        &:active,
        &.active,
        .show > &.dropdown-toggle {
            color: $active-color;
            background-color: $active-background;
            // Remove CSS gradients if they're enabled
            background-image: if($enable-gradients, none, null);
            border-color: $active-border;

            &:focus {
                @if $enable-shadows {
                    @include box-shadow(
                        $btn-active-box-shadow,
                        0 0 0 $btn-focus-width
                            rgba(mix($color, $border, 15%), 0.5)
                    );
                } @else {
                    // Avoid using mixin so we can pass custom focus shadow properly
                    box-shadow: 0
                        0
                        0
                        $btn-focus-width
                        rgba(mix($color, $border, 15%), 0.5);
                }
            }
        }

        &:disabled,
        &.disabled {
            color: $disabled-color;
            background-color: $disabled-background;
            // Remove CSS gradients if they're enabled
            background-image: if($enable-gradients, none, null);
            border-color: $disabled-border;
        }
    }

    &.btn-link {
        color: $background;

        &:hover {
            color: $hover-background;
        }

        .btn-check:focus + &,
        &:focus {
            color: $hover-background;
        }

        .btn-check:checked + &,
        .btn-check:active + &,
        &:active,
        &.active,
        .show > &.dropdown-toggle {
            color: $hover-background;
        }

        &:disabled,
        &.disabled {
            color: $disabled-background;
        }
    }
}
// scss-docs-end btn-variant-mixin

// Button sizes
@mixin btn-size($padding-vertical, $padding-horizontal, $font-size, $border) {
    font-size: $font-size;
    border-radius: $border;
    padding: $padding-vertical $padding-horizontal;
}

// for social buttons
@mixin social-buttons-color($color, $state-color) {
    @include diagonal-gradient($color, darken($color, 20%));

    //background-color: $color;
    color: $white;
    background-size: 210% 210%;
    background-position: top right;
    background-repeat: space;

    &:focus,
    &:active,
    &:hover {
        background-color: $state-color;
        background-image: linear-gradient(
            to bottom left,
            $color,
            darken($color, 20%),
            $color
        ) !important;
        color: $white;
    }
}
